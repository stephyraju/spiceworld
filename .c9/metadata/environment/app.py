{"filter":false,"title":"app.py","tooltip":"/app.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":241,"column":38},"end":{"row":241,"column":39},"action":"remove","lines":[" "],"id":2571,"ignore":true}],[{"start":{"row":241,"column":38},"end":{"row":241,"column":39},"action":"insert","lines":["_"],"id":2572,"ignore":true}],[{"start":{"row":241,"column":38},"end":{"row":241,"column":39},"action":"remove","lines":["_"],"id":2573,"ignore":true}],[{"start":{"row":241,"column":38},"end":{"row":241,"column":39},"action":"insert","lines":[" "],"id":2574,"ignore":true}],[{"start":{"row":244,"column":47},"end":{"row":245,"column":8},"action":"insert","lines":["","        "],"id":2575,"ignore":true}],[{"start":{"row":245,"column":8},"end":{"row":245,"column":33},"action":"insert","lines":["recipes_submitted_by_user"],"id":2576,"ignore":true}],[{"start":{"row":245,"column":8},"end":{"row":245,"column":22},"action":"insert","lines":["logging.info(\""],"id":2577,"ignore":true}],[{"start":{"row":245,"column":22},"end":{"row":245,"column":23},"action":"remove","lines":["r"],"id":2578,"ignore":true}],[{"start":{"row":245,"column":22},"end":{"row":245,"column":23},"action":"insert","lines":["R"],"id":2579,"ignore":true}],[{"start":{"row":245,"column":29},"end":{"row":245,"column":30},"action":"remove","lines":["_"],"id":2580,"ignore":true},{"start":{"row":245,"column":29},"end":{"row":245,"column":30},"action":"insert","lines":[" "]}],[{"start":{"row":245,"column":47},"end":{"row":245,"column":48},"action":"insert","lines":[")"],"id":2581,"ignore":true}],[{"start":{"row":245,"column":47},"end":{"row":245,"column":48},"action":"insert","lines":["\""],"id":2582,"ignore":true}],[{"start":{"row":245,"column":22},"end":{"row":245,"column":47},"action":"remove","lines":["Recipes submitted_by_user"],"id":2583,"ignore":true},{"start":{"row":245,"column":22},"end":{"row":245,"column":23},"action":"insert","lines":["U"]}],[{"start":{"row":245,"column":23},"end":{"row":245,"column":24},"action":"insert","lines":["s"],"id":2584,"ignore":true}],[{"start":{"row":245,"column":24},"end":{"row":245,"column":28},"action":"insert","lines":["er i"],"id":2585,"ignore":true}],[{"start":{"row":245,"column":28},"end":{"row":245,"column":31},"action":"insert","lines":["s n"],"id":2586,"ignore":true}],[{"start":{"row":245,"column":31},"end":{"row":245,"column":34},"action":"insert","lines":["ot "],"id":2587,"ignore":true}],[{"start":{"row":245,"column":34},"end":{"row":245,"column":35},"action":"insert","lines":["a"],"id":2588,"ignore":true}],[{"start":{"row":245,"column":35},"end":{"row":245,"column":38},"action":"insert","lines":["llo"],"id":2589,"ignore":true}],[{"start":{"row":245,"column":38},"end":{"row":245,"column":41},"action":"insert","lines":["wed"],"id":2590,"ignore":true}],[{"start":{"row":245,"column":41},"end":{"row":245,"column":45},"action":"insert","lines":[" to "],"id":2591,"ignore":true}],[{"start":{"row":245,"column":45},"end":{"row":245,"column":48},"action":"insert","lines":["acc"],"id":2592,"ignore":true}],[{"start":{"row":245,"column":48},"end":{"row":245,"column":49},"action":"insert","lines":["e"],"id":2593,"ignore":true}],[{"start":{"row":245,"column":49},"end":{"row":245,"column":52},"action":"insert","lines":["ss "],"id":2594,"ignore":true}],[{"start":{"row":245,"column":52},"end":{"row":245,"column":54},"action":"insert","lines":["pa"],"id":2595,"ignore":true}],[{"start":{"row":245,"column":54},"end":{"row":245,"column":56},"action":"insert","lines":["ge"],"id":2596,"ignore":true}],[{"start":{"row":248,"column":9},"end":{"row":249,"column":8},"action":"insert","lines":["","        "],"id":2597,"ignore":true}],[{"start":{"row":249,"column":8},"end":{"row":249,"column":58},"action":"insert","lines":["logging.info(\"User is not allowed to access page\")"],"id":2598,"ignore":true}],[{"start":{"row":249,"column":30},"end":{"row":249,"column":41},"action":"remove","lines":["not allowed"],"id":2599,"ignore":true},{"start":{"row":249,"column":30},"end":{"row":249,"column":31},"action":"insert","lines":["a"]}],[{"start":{"row":249,"column":31},"end":{"row":249,"column":32},"action":"insert","lines":["u"],"id":2600,"ignore":true}],[{"start":{"row":249,"column":32},"end":{"row":249,"column":35},"action":"insert","lines":["tho"],"id":2601,"ignore":true}],[{"start":{"row":249,"column":35},"end":{"row":249,"column":36},"action":"insert","lines":["r"],"id":2602,"ignore":true}],[{"start":{"row":249,"column":36},"end":{"row":249,"column":37},"action":"insert","lines":["i"],"id":2603,"ignore":true}],[{"start":{"row":249,"column":37},"end":{"row":249,"column":39},"action":"insert","lines":["ze"],"id":2604,"ignore":true}],[{"start":{"row":249,"column":39},"end":{"row":249,"column":41},"action":"insert","lines":["d "],"id":2605,"ignore":true}],[{"start":{"row":249,"column":40},"end":{"row":249,"column":41},"action":"remove","lines":[" "],"id":2606,"ignore":true}],[{"start":{"row":232,"column":4},"end":{"row":232,"column":5},"action":"remove","lines":["#"],"id":2607}],[{"start":{"row":233,"column":5},"end":{"row":237,"column":4},"action":"remove","lines":["logging.info(\"Users are: \" + str(users))","    #logging.info(\"Users find all are: \" + str(users.find()))","    #user_exists = users.find_one({'author':request.form['users'].lower()})","    #logging.info('User exists: ' + str(user_exists))","    "],"id":2608},{"start":{"row":233,"column":4},"end":{"row":233,"column":5},"action":"remove","lines":["#"]},{"start":{"row":233,"column":0},"end":{"row":233,"column":4},"action":"remove","lines":["    "]},{"start":{"row":232,"column":26},"end":{"row":233,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":238,"column":62},"end":{"row":239,"column":0},"action":"insert","lines":["",""],"id":2609},{"start":{"row":239,"column":0},"end":{"row":239,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":239,"column":4},"end":{"row":239,"column":54},"action":"insert","lines":["logging.info(\"User is not allowed to access page\")"],"id":2610}],[{"start":{"row":239,"column":18},"end":{"row":239,"column":52},"action":"remove","lines":["User is not allowed to access page"],"id":2611},{"start":{"row":239,"column":18},"end":{"row":239,"column":39},"action":"insert","lines":["total_recipes_by_user"]}],[{"start":{"row":239,"column":18},"end":{"row":239,"column":19},"action":"remove","lines":["t"],"id":2612}],[{"start":{"row":239,"column":18},"end":{"row":239,"column":19},"action":"insert","lines":["T"],"id":2613}],[{"start":{"row":239,"column":23},"end":{"row":239,"column":24},"action":"remove","lines":["_"],"id":2614}],[{"start":{"row":239,"column":23},"end":{"row":239,"column":24},"action":"insert","lines":[" "],"id":2615}],[{"start":{"row":239,"column":31},"end":{"row":239,"column":32},"action":"remove","lines":["_"],"id":2616}],[{"start":{"row":239,"column":31},"end":{"row":239,"column":32},"action":"insert","lines":[" "],"id":2617}],[{"start":{"row":239,"column":34},"end":{"row":239,"column":35},"action":"remove","lines":["_"],"id":2618}],[{"start":{"row":239,"column":34},"end":{"row":239,"column":35},"action":"insert","lines":[" "],"id":2619}],[{"start":{"row":239,"column":39},"end":{"row":239,"column":40},"action":"insert","lines":[":"],"id":2620}],[{"start":{"row":239,"column":40},"end":{"row":239,"column":41},"action":"insert","lines":[" "],"id":2621}],[{"start":{"row":239,"column":42},"end":{"row":239,"column":43},"action":"insert","lines":[" "],"id":2622},{"start":{"row":239,"column":43},"end":{"row":239,"column":44},"action":"insert","lines":["+"]}],[{"start":{"row":239,"column":44},"end":{"row":239,"column":45},"action":"insert","lines":[" "],"id":2623}],[{"start":{"row":239,"column":45},"end":{"row":239,"column":66},"action":"insert","lines":["total_recipes_by_user"],"id":2624}],[{"start":{"row":239,"column":45},"end":{"row":239,"column":46},"action":"insert","lines":["s"],"id":2625},{"start":{"row":239,"column":46},"end":{"row":239,"column":47},"action":"insert","lines":["t"]},{"start":{"row":239,"column":47},"end":{"row":239,"column":48},"action":"insert","lines":["r"]},{"start":{"row":239,"column":48},"end":{"row":239,"column":49},"action":"insert","lines":["("]}],[{"start":{"row":239,"column":71},"end":{"row":239,"column":72},"action":"insert","lines":[")"],"id":2626}],[{"start":{"row":233,"column":4},"end":{"row":234,"column":0},"action":"insert","lines":["",""],"id":2627},{"start":{"row":234,"column":0},"end":{"row":234,"column":4},"action":"insert","lines":["    "]},{"start":{"row":234,"column":4},"end":{"row":234,"column":5},"action":"insert","lines":["l"]},{"start":{"row":234,"column":5},"end":{"row":234,"column":6},"action":"insert","lines":["o"]},{"start":{"row":234,"column":6},"end":{"row":234,"column":7},"action":"insert","lines":["g"]}],[{"start":{"row":234,"column":7},"end":{"row":234,"column":8},"action":"insert","lines":["g"],"id":2628}],[{"start":{"row":234,"column":4},"end":{"row":234,"column":8},"action":"remove","lines":["logg"],"id":2629},{"start":{"row":234,"column":4},"end":{"row":234,"column":11},"action":"insert","lines":["logging"]}],[{"start":{"row":234,"column":11},"end":{"row":234,"column":12},"action":"insert","lines":["."],"id":2630},{"start":{"row":234,"column":12},"end":{"row":234,"column":13},"action":"insert","lines":["i"]},{"start":{"row":234,"column":13},"end":{"row":234,"column":14},"action":"insert","lines":["n"]}],[{"start":{"row":234,"column":12},"end":{"row":234,"column":14},"action":"remove","lines":["in"],"id":2631},{"start":{"row":234,"column":12},"end":{"row":234,"column":16},"action":"insert","lines":["info"]}],[{"start":{"row":234,"column":16},"end":{"row":234,"column":17},"action":"insert","lines":["("],"id":2632},{"start":{"row":234,"column":17},"end":{"row":234,"column":18},"action":"insert","lines":[")"]}],[{"start":{"row":234,"column":17},"end":{"row":234,"column":18},"action":"insert","lines":["\""],"id":2633},{"start":{"row":234,"column":18},"end":{"row":234,"column":19},"action":"insert","lines":["\""]}],[{"start":{"row":234,"column":18},"end":{"row":234,"column":19},"action":"insert","lines":["R"],"id":2634},{"start":{"row":234,"column":19},"end":{"row":234,"column":20},"action":"insert","lines":["e"]},{"start":{"row":234,"column":20},"end":{"row":234,"column":21},"action":"insert","lines":["c"]},{"start":{"row":234,"column":21},"end":{"row":234,"column":22},"action":"insert","lines":["i"]},{"start":{"row":234,"column":22},"end":{"row":234,"column":23},"action":"insert","lines":["p"]},{"start":{"row":234,"column":23},"end":{"row":234,"column":24},"action":"insert","lines":["e"]},{"start":{"row":234,"column":24},"end":{"row":234,"column":25},"action":"insert","lines":["d"]}],[{"start":{"row":234,"column":24},"end":{"row":234,"column":25},"action":"remove","lines":["d"],"id":2635}],[{"start":{"row":234,"column":24},"end":{"row":234,"column":25},"action":"insert","lines":["s"],"id":2636},{"start":{"row":234,"column":25},"end":{"row":234,"column":26},"action":"insert","lines":[":"]}],[{"start":{"row":234,"column":26},"end":{"row":234,"column":27},"action":"insert","lines":[" "],"id":2637}],[{"start":{"row":234,"column":28},"end":{"row":234,"column":29},"action":"insert","lines":[" "],"id":2638},{"start":{"row":234,"column":29},"end":{"row":234,"column":30},"action":"insert","lines":["+"]}],[{"start":{"row":234,"column":30},"end":{"row":234,"column":31},"action":"insert","lines":[" "],"id":2639},{"start":{"row":234,"column":31},"end":{"row":234,"column":32},"action":"insert","lines":["s"]},{"start":{"row":234,"column":32},"end":{"row":234,"column":33},"action":"insert","lines":["t"]},{"start":{"row":234,"column":33},"end":{"row":234,"column":34},"action":"insert","lines":["r"]}],[{"start":{"row":234,"column":34},"end":{"row":234,"column":35},"action":"insert","lines":["("],"id":2640},{"start":{"row":234,"column":35},"end":{"row":234,"column":36},"action":"insert","lines":[")"]}],[{"start":{"row":234,"column":35},"end":{"row":234,"column":51},"action":"insert","lines":["mongo.db.recipes"],"id":2641}],[{"start":{"row":234,"column":51},"end":{"row":234,"column":52},"action":"insert","lines":["."],"id":2642},{"start":{"row":234,"column":52},"end":{"row":234,"column":53},"action":"insert","lines":["f"]},{"start":{"row":234,"column":53},"end":{"row":234,"column":54},"action":"insert","lines":["i"]},{"start":{"row":234,"column":54},"end":{"row":234,"column":55},"action":"insert","lines":["n"]}],[{"start":{"row":234,"column":52},"end":{"row":234,"column":55},"action":"remove","lines":["fin"],"id":2643},{"start":{"row":234,"column":52},"end":{"row":234,"column":56},"action":"insert","lines":["find"]}],[{"start":{"row":234,"column":56},"end":{"row":234,"column":57},"action":"insert","lines":["("],"id":2644},{"start":{"row":234,"column":57},"end":{"row":234,"column":58},"action":"insert","lines":[")"]}],[{"start":{"row":234,"column":57},"end":{"row":234,"column":83},"action":"insert","lines":["{\"username\": account_name}"],"id":2645}],[{"start":{"row":234,"column":59},"end":{"row":234,"column":67},"action":"remove","lines":["username"],"id":2646},{"start":{"row":234,"column":59},"end":{"row":234,"column":60},"action":"insert","lines":["a"]},{"start":{"row":234,"column":60},"end":{"row":234,"column":61},"action":"insert","lines":["u"]},{"start":{"row":234,"column":61},"end":{"row":234,"column":62},"action":"insert","lines":["t"]},{"start":{"row":234,"column":62},"end":{"row":234,"column":63},"action":"insert","lines":["h"]},{"start":{"row":234,"column":63},"end":{"row":234,"column":64},"action":"insert","lines":["o"]},{"start":{"row":234,"column":64},"end":{"row":234,"column":65},"action":"insert","lines":["r"]}],[{"start":{"row":234,"column":84},"end":{"row":235,"column":0},"action":"insert","lines":["",""],"id":2647},{"start":{"row":235,"column":0},"end":{"row":235,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":234,"column":82},"end":{"row":234,"column":83},"action":"insert","lines":["."],"id":2648}],[{"start":{"row":234,"column":83},"end":{"row":234,"column":93},"action":"insert","lines":[".toArray()"],"id":2649}],[{"start":{"row":234,"column":82},"end":{"row":234,"column":83},"action":"remove","lines":["."],"id":2650}],[{"start":{"row":234,"column":82},"end":{"row":234,"column":92},"action":"remove","lines":[".toArray()"],"id":2651}],[{"start":{"row":234,"column":82},"end":{"row":234,"column":83},"action":"insert","lines":["."],"id":2652}],[{"start":{"row":234,"column":82},"end":{"row":234,"column":83},"action":"remove","lines":["."],"id":2653}],[{"start":{"row":237,"column":14},"end":{"row":237,"column":22},"action":"remove","lines":["username"],"id":2654},{"start":{"row":237,"column":14},"end":{"row":237,"column":20},"action":"insert","lines":["author"]}],[{"start":{"row":245,"column":37},"end":{"row":245,"column":38},"action":"remove","lines":["x"],"id":2655},{"start":{"row":245,"column":36},"end":{"row":245,"column":37},"action":"remove","lines":["e"]},{"start":{"row":245,"column":35},"end":{"row":245,"column":36},"action":"remove","lines":["d"]},{"start":{"row":245,"column":34},"end":{"row":245,"column":35},"action":"remove","lines":["n"]},{"start":{"row":245,"column":33},"end":{"row":245,"column":34},"action":"remove","lines":["i"]}],[{"start":{"row":245,"column":33},"end":{"row":245,"column":34},"action":"insert","lines":["i"],"id":2656},{"start":{"row":245,"column":34},"end":{"row":245,"column":35},"action":"insert","lines":["n"]},{"start":{"row":245,"column":35},"end":{"row":245,"column":36},"action":"insert","lines":["d"]},{"start":{"row":245,"column":36},"end":{"row":245,"column":37},"action":"insert","lines":["e"]},{"start":{"row":245,"column":37},"end":{"row":245,"column":38},"action":"insert","lines":["x"]}],[{"start":{"row":245,"column":33},"end":{"row":245,"column":38},"action":"remove","lines":["index"],"id":2657},{"start":{"row":245,"column":33},"end":{"row":245,"column":34},"action":"insert","lines":["r"]},{"start":{"row":245,"column":34},"end":{"row":245,"column":35},"action":"insert","lines":["e"]},{"start":{"row":245,"column":35},"end":{"row":245,"column":36},"action":"insert","lines":["c"]},{"start":{"row":245,"column":36},"end":{"row":245,"column":37},"action":"insert","lines":["i"]},{"start":{"row":245,"column":37},"end":{"row":245,"column":38},"action":"insert","lines":["p"]},{"start":{"row":245,"column":38},"end":{"row":245,"column":39},"action":"insert","lines":["e"]},{"start":{"row":245,"column":39},"end":{"row":245,"column":40},"action":"insert","lines":["s"]}],[{"start":{"row":245,"column":39},"end":{"row":245,"column":40},"action":"remove","lines":["s"],"id":2658},{"start":{"row":245,"column":38},"end":{"row":245,"column":39},"action":"remove","lines":["e"]},{"start":{"row":245,"column":37},"end":{"row":245,"column":38},"action":"remove","lines":["p"]},{"start":{"row":245,"column":36},"end":{"row":245,"column":37},"action":"remove","lines":["i"]},{"start":{"row":245,"column":35},"end":{"row":245,"column":36},"action":"remove","lines":["c"]},{"start":{"row":245,"column":34},"end":{"row":245,"column":35},"action":"remove","lines":["e"]},{"start":{"row":245,"column":33},"end":{"row":245,"column":34},"action":"remove","lines":["r"]}],[{"start":{"row":245,"column":33},"end":{"row":245,"column":34},"action":"insert","lines":["i"],"id":2659},{"start":{"row":245,"column":34},"end":{"row":245,"column":35},"action":"insert","lines":["n"]},{"start":{"row":245,"column":35},"end":{"row":245,"column":36},"action":"insert","lines":["d"]},{"start":{"row":245,"column":36},"end":{"row":245,"column":37},"action":"insert","lines":["e"]},{"start":{"row":245,"column":37},"end":{"row":245,"column":38},"action":"insert","lines":["x"]}],[{"start":{"row":26,"column":4},"end":{"row":26,"column":5},"action":"remove","lines":[" "],"id":2673},{"start":{"row":26,"column":0},"end":{"row":26,"column":4},"action":"remove","lines":["    "]},{"start":{"row":25,"column":73},"end":{"row":26,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":25,"column":40},"end":{"row":25,"column":41},"action":"remove","lines":[" "],"id":2683}],[{"start":{"row":25,"column":40},"end":{"row":25,"column":41},"action":"insert","lines":[" "],"id":2684}],[{"start":{"row":227,"column":31},"end":{"row":228,"column":0},"action":"insert","lines":["",""],"id":2685}],[{"start":{"row":227,"column":0},"end":{"row":254,"column":28},"action":"remove","lines":["#-----------Account-----------#","","@app.route(\"/account/<account_name>, methods=['GET']\")","def account(account_name):","    logging.info(\"Account Name is: \" + str(account_name))","    users = mongo.db.users","    ","    logging.info(\"Recipes: \" + str(mongo.db.recipes.find({\"author\": account_name})))","    ","    recipes_submitted_by_user = mongo.db.recipes.find(","            {\"author\": account_name})","    logging.info(\"Recipes submitted by user: \" + str(recipes_submitted_by_user))","    ","    total_recipes_by_user = recipes_submitted_by_user.count() ","    logging.info(\"Total recipes by user: \" + str(total_recipes_by_user))","    if account_name != session.get('username'):","        logging.info(\"User is not allowed to access page\")","        flash(\"You can only access your own account page.\")","        return redirect(url_for('index'))","    else:","        logging.info(\"User is authorized to access page\")","        users = mongo.db.users.find_one({\"username\": account_name})","        recipe_submitted_by_user = mongo.db.recipes.find(","            {\"username\": account_name})","    return render_template('account.html',  ","                            users_recipes=recipe_submitted_by_user,","                            total_recipes_by_user = recipes_submitted_by_user.count() )","                            "],"id":2688}],[{"start":{"row":0,"column":0},"end":{"row":231,"column":23},"action":"remove","lines":["import os","from flask import Flask, render_template, redirect, request, url_for, session, flash","from flask_pymongo import PyMongo","from bson.objectid import ObjectId","import bcrypt","import logging","","","# declaring app name","app = Flask(__name__)","","app.config['SECRET_KEY'] = os.getenv('SECRET')","app.config[\"MONGO_DBNAME\"] = 'cook_book'","app.config[\"MONGO_URI\"] = os.getenv('MONGO_URI', 'mongodb://localhost')","","# Logging Config","logging.basicConfig(level=logging.INFO)","","","mongo = PyMongo(app)","","@app.route('/')","@app.route('/index')","def index():","    ","    return render_template(\"index.html\", recipes=mongo.db.recipes.find())","#@app.route('/get_recipes',methods=['POST','GET'])","#def get_recipes():"," #   return render_template(\"recipes.html\", recipes=mongo.db.recipes.find()) ","    ","","# -------CREATE---------#","     ","@app.route('/add_recipe')","def add_recipe():","     return render_template(\"addrecipe.html\",  ","               recipes=mongo.db.recipes.find(),","               categories = mongo.db.categories.find(), ","               cuisines=mongo.db.cuisines.find(), ","               difficulty=mongo.db.difficulty.find(), ","               allergens=mongo.db.allergens.find())","               "," ","@app.route('/insert_recipe', methods=['POST'])","def insert_recipe():","    print(request.form)","    print(request.form.getlist('ingredients[]'))","    print(request.form.getlist('preparation[]'))","    print(request.form.to_dict())","    recipes = mongo.db.recipes","    data = request.form.to_dict()","    data.update({'ingredients':request.form.getlist('ingredients[]')})","    data.update({'preparation':request.form.getlist('preparation[]')})","    del data['ingredients[]']","    del data['preparation[]']","    recipes.insert_one(data)","    return redirect(url_for('get_recipes'))  ","    ","#-------READ--------#","","@app.route(\"/get_recipes\", methods=['GET'])","def get_recipes():      ","    return render_template('recipes.html',","                         recipes=mongo.db.recipes.find(),","                         categories = mongo.db.categories.find())                          ","","@app.route('/view_recipe/recipe_id?=<recipe_id>')","def view_recipe(recipe_id):","    recipe = mongo.db.recipes.find_one({\"_id\": ObjectId(recipe_id)})","    return render_template('view.html',","                        title='View Recipe',","                        username=session['username'], ","                        recipe=recipe)  ","#-----------Search-----------#","@app.route('/search', methods=['POST'])","def search(): ","    print(request.form)","    print(request.form.to_dict())","    word_find = request.form[\"word_find\"]     ","    mongo.db.recipes.create_index([(\"$**\", 'text')])","    recipes = mongo.db.recipes.find({\"$text\":{\"$search\": word_find}})","    return render_template('recipes.html',","                            title=\"View recipes\", ","                            recipes=recipes,","                            username=session['username'], ","                            categories = mongo.db.categories.find(), ","                            cuisines=mongo.db.cuisines.find(), ","                            difficulty=mongo.db.difficulty.find(), ","                            allergens=mongo.db.allergens.find()) "," ","                            ","@app.route('/get_starter', methods=['GET'])","def get_starter():","    return render_template('recipes.html', title='Starters', recipes=mongo.db.recipes.find({'category_name': 'Starter'}))                           ","","@app.route('/get_breakfast', methods=['GET'])","def get_breakfast():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'category_name': 'Breakfast'})) ","","@app.route('/get_main', methods=['GET'])","def get_main():","    return render_template('recipes.html', title='Main course', recipes=mongo.db.recipes.find({'category_name': 'Main Course'}))                            ","","@app.route('/get_dessert', methods=['GET'])","def get_dessert():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'category_name': 'Dessert'}))   ","    ","@app.route('/get_snacks', methods=['GET'])","def get_snacks():","    return render_template('recipes.html', title='Snacks', recipes=mongo.db.recipes.find({'category_name': 'Snacks'})) ","    ","@app.route('/get_cakes', methods=['GET'])","def get_cakes():","    return render_template('recipes.html', title='Cakes', recipes=mongo.db.recipes.find({'category_name': 'Cakes'})) ","    ","@app.route('/get_bbq', methods=['GET'])","def get_bbq():","    return render_template('recipes.html', title='BBQ', recipes=mongo.db.recipes.find({'category_name': 'BBQ'})) ","","@app.route('/get_vegan', methods=['GET'])","def get_vegan():","    return render_template('recipes.html', title='Vegan', recipes=mongo.db.recipes.find({'category_name': 'Vegan'})) ","    ","@app.route('/get_instant', methods=['GET'])","def get_instant():","    return render_template('recipes.html', title='Instant Pot', recipes=mongo.db.recipes.find({'category_name': 'Instant Pot'})) ","","@app.route('/get_drinks', methods=['GET'])","def get_drinks():","    return render_template('recipes.html', title='Drinks', recipes=mongo.db.recipes.find({'category_name': 'Drinks'})) ","        ","#-----------UPDATE-----------#","","@app.route('/edit_recipe/<recipe_id>',methods=['GET'])","def edit_recipe(recipe_id):","    recipe = mongo.db.recipes.find_one({\"_id\":ObjectId(recipe_id)})","    return render_template('editrecipe.html', ","                            recipe=recipe,","                            categories=mongo.db.categories.find(), ","                            cuisine=mongo.db.cuisine.find(), ","                            difficulty=mongo.db.difficulty.find(), ","                            allergens=mongo.db.allergens.find())","                            ","@app.route('/update_recipe/<recipe_id>', methods=[\"POST\"])","def update_recipe(recipe_id):","    print(mongo.db.recipes.find_one({\"_id\": ObjectId(recipe_id)}))","    print(request.form)","    print(request.form.to_dict())","    recipes = mongo.db.recipes","    recipes.update({\"_id\":ObjectId(recipe_id)},","        {","        'recipe_name':request.form.get('recipe_name'),","        'author':request.form.get('author'),","        'category_name':request.form.get('category_name'),","        'description': request.form.get('description'),","        'serves':request.form.get('serves'),","        'cooking_time':request.form.get('cooking_time'),","        'cuisine':request.form.get('cuisine'),","        'difficulty':request.form.get('difficulty'),","        'allergens':request.form.get('allergens'), ","        'image_url' :request.form.get('image_url'),","        'ingredients':request.form.getlist('ingredients[]'),","        'preparation':request.form.getlist('preparation[]')","        })","    return redirect(url_for('view_recipe',recipe_id=recipe_id))","  ","#-----------DELETE-----------#","@app.route('/delete_recipe/<recipe_id>')","def delete_recipe(recipe_id):","    mongo.db.recipes.remove({\"_id\":ObjectId(recipe_id)})","    return redirect(url_for('get_recipes'))","","#-----------Register-----------#","#https://www.youtube.com/watch?v=vVx1737auSE","","@app.route('/register', methods=['GET','POST'])","def register():","    logging.info('Inside Registering.....')","    if request.method == 'POST':","        logging.info('User name: ' + str(request.form['username'].lower()))","        session['username'] = request.form['username'].lower()","        logging.info('Mongo User: ' + str(mongo.db.users))","        users = mongo.db.users","        user_exists = users.find_one({'author':request.form['username'].lower()})","        logging.info('User exists: ' + str(user_exists))","        ","        if user_exists is None:","            logging.info('User Does not exist. Creating new user')","            hashpass = bcrypt.hashpw(request.form['password'].encode('utf-8'), bcrypt.gensalt())","            users.insert({'author':request.form['username'].lower(), 'password':hashpass})","            session['username'] = request.form['username'].lower()","            return redirect(url_for('get_recipes'))","","        flash('Username already exists, please choose a different one.')","        logging.info('User already exist. Skipping new user')","        session.pop('username', None)","        return render_template('register.html', title=\"Register\")","","    return render_template('register.html', title=\"Register\")","","#-----------Login-----------#","","@app.route('/login',methods=['GET','POST'])","def login():","    if request.method == 'POST':","        session[\"username\"] = request.form[\"username\"].lower()","        users = mongo.db.users","        user_login = users.find_one({'author':request.form['username'].lower()})","","        if user_login:","            if bcrypt.hashpw(request.form['password'].encode('utf-8'), user_login['password']) == user_login['password']:","                # session[\"username\"] = request.form[\"username\"].lower()","                return redirect(url_for('get_recipes'))","        ","        flash('The login details are not correct')","        session.pop('username', None)","        return render_template('login.html',  title=\"Login\")","","    return render_template('login.html',  title=\"Login\")","","#-----------Logout-----------#","@app.route('/logout')","def logout():","   # remove the username from the session if it is there","   session.pop('username', None)","   return redirect(url_for('index'))","   ","","if __name__ == '__main__':","    app.run(host=os.environ.get('IP'),","            port=int(os.environ.get('PORT')),","            debug=True)"],"id":2689},{"start":{"row":0,"column":0},"end":{"row":231,"column":23},"action":"insert","lines":["import os","from flask import Flask, render_template, redirect, request, url_for, session, flash","from flask_pymongo import PyMongo","from bson.objectid import ObjectId","import bcrypt","import logging","","","# declaring app name","app = Flask(__name__)","","app.config['SECRET_KEY'] = os.getenv('SECRET')","app.config[\"MONGO_DBNAME\"] = 'cook_book'","app.config[\"MONGO_URI\"] = os.getenv('MONGO_URI', 'mongodb://localhost')","","# Logging Config","logging.basicConfig(level=logging.INFO)","","","mongo = PyMongo(app)","","@app.route('/')","@app.route('/index')","def index():","    ","    return render_template(\"index.html\", recipes=mongo.db.recipes.find())","     ","#@app.route('/get_recipes',methods=['POST','GET'])","#def get_recipes():"," #   return render_template(\"recipes.html\", recipes=mongo.db.recipes.find()) ","    ","","# -------CREATE---------#","     ","@app.route('/add_recipe')","def add_recipe():","     return render_template(\"addrecipe.html\",  ","               recipes=mongo.db.recipes.find(),","               categories = mongo.db.categories.find(), ","               cuisines=mongo.db.cuisines.find(), ","               difficulty=mongo.db.difficulty.find(), ","               allergens=mongo.db.allergens.find())","               "," ","@app.route('/insert_recipe', methods=['POST'])","def insert_recipe():","    print(request.form)","    print(request.form.getlist('ingredients[]'))","    print(request.form.getlist('preparation[]'))","    print(request.form.to_dict())","    recipes = mongo.db.recipes","    data = request.form.to_dict()","    data.update({'ingredients':request.form.getlist('ingredients[]')})","    data.update({'preparation':request.form.getlist('preparation[]')})","    del data['ingredients[]']","    del data['preparation[]']","    recipes.insert_one(data)","    return redirect(url_for('get_recipes'))  ","    ","#-------READ--------#","","@app.route(\"/get_recipes\", methods=['GET'])","def get_recipes():      ","    return render_template('recipes.html',","                         recipes=mongo.db.recipes.find(),","                         categories = mongo.db.categories.find())                          ","","@app.route('/view_recipe/recipe_id?=<recipe_id>')","def view_recipe(recipe_id):","    recipe = mongo.db.recipes.find_one({\"_id\": ObjectId(recipe_id)})","    return render_template('view.html',","                        title='View Recipe',","                        username=session['username'], ","                        recipe=recipe)  ","#-----------Search-----------#","@app.route('/search', methods=['POST'])","def search(): ","    print(request.form)","    print(request.form.to_dict())","    word_find = request.form[\"word_find\"]     ","    mongo.db.recipes.create_index([(\"$**\", 'text')])","    recipes = mongo.db.recipes.find({\"$text\":{\"$search\": word_find}})","    return render_template('recipes.html',","                            title=\"View recipes\", ","                            recipes=recipes,","                            username=session['username'], ","                            categories = mongo.db.categories.find(), ","                            cuisines=mongo.db.cuisines.find(), ","                            difficulty=mongo.db.difficulty.find(), ","                            allergens=mongo.db.allergens.find()) "," ","                            ","@app.route('/get_starter', methods=['GET'])","def get_starter():","    return render_template('recipes.html', title='Starters', recipes=mongo.db.recipes.find({'category_name': 'Starter'}))                           ","","@app.route('/get_breakfast', methods=['GET'])","def get_breakfast():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'category_name': 'Breakfast'})) ","","@app.route('/get_main', methods=['GET'])","def get_main():","    return render_template('recipes.html', title='Main course', recipes=mongo.db.recipes.find({'category_name': 'Main Course'}))                            ","","@app.route('/get_dessert', methods=['GET'])","def get_dessert():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'category_name': 'Dessert'}))   ","    ","@app.route('/get_snacks', methods=['GET'])","def get_snacks():","    return render_template('recipes.html', title='Snacks', recipes=mongo.db.recipes.find({'category_name': 'Snacks'})) ","    ","@app.route('/get_cakes', methods=['GET'])","def get_cakes():","    return render_template('recipes.html', title='Cakes', recipes=mongo.db.recipes.find({'category_name': 'Cakes'})) ","    ","@app.route('/get_bbq', methods=['GET'])","def get_bbq():","    return render_template('recipes.html', title='BBQ', recipes=mongo.db.recipes.find({'category_name': 'BBQ'})) ","","@app.route('/get_vegan', methods=['GET'])","def get_vegan():","    return render_template('recipes.html', title='Vegan', recipes=mongo.db.recipes.find({'category_name': 'Vegan'})) ","    ","@app.route('/get_instant', methods=['GET'])","def get_instant():","    return render_template('recipes.html', title='Instant Pot', recipes=mongo.db.recipes.find({'category_name': 'Instant Pot'})) ","","@app.route('/get_drinks', methods=['GET'])","def get_drinks():","    return render_template('recipes.html', title='Drinks', recipes=mongo.db.recipes.find({'category_name': 'Drinks'})) ","        ","#-----------UPDATE-----------#","","@app.route('/edit_recipe/<recipe_id>',methods=['GET'])","def edit_recipe(recipe_id):","    recipe = mongo.db.recipes.find_one({\"_id\":ObjectId(recipe_id)})","    return render_template('editrecipe.html', ","                            recipe=recipe,","                            categories=mongo.db.categories.find(), ","                            cuisine=mongo.db.cuisine.find(), ","                            difficulty=mongo.db.difficulty.find(), ","                            allergens=mongo.db.allergens.find())","                            ","@app.route('/update_recipe/<recipe_id>', methods=[\"POST\"])","def update_recipe(recipe_id):","    print(mongo.db.recipes.find_one({\"_id\": ObjectId(recipe_id)}))","    print(request.form)","    print(request.form.to_dict())","    recipes = mongo.db.recipes","    recipes.update({\"_id\":ObjectId(recipe_id)},","        {","        'recipe_name':request.form.get('recipe_name'),","        'author':request.form.get('author'),","        'category_name':request.form.get('category_name'),","        'description': request.form.get('description'),","        'serves':request.form.get('serves'),","        'cooking_time':request.form.get('cooking_time'),","        'cuisine':request.form.get('cuisine'),","        'difficulty':request.form.get('difficulty'),","        'allergens':request.form.get('allergens'), ","        'image_url' :request.form.get('image_url'),","        'ingredients':request.form.getlist('ingredients[]'),","        'preparation':request.form.getlist('preparation[]')","        })","    return redirect(url_for('view_recipe',recipe_id=recipe_id))","  ","#-----------DELETE-----------#","@app.route('/delete_recipe/<recipe_id>')","def delete_recipe(recipe_id):","    mongo.db.recipes.remove({\"_id\":ObjectId(recipe_id)})","    return redirect(url_for('get_recipes'))","","#-----------Register-----------#","#https://www.youtube.com/watch?v=vVx1737auSE","","@app.route('/register', methods=['GET','POST'])","def register():","    logging.info('Inside Registering.....')","    if request.method == 'POST':","        logging.info('User name: ' + str(request.form['username'].lower()))","        session['username'] = request.form['username'].lower()","        logging.info('Mongo User: ' + str(mongo.db.users))","        users = mongo.db.users","        user_exists = users.find_one({'author':request.form['username'].lower()})","        logging.info('User exists: ' + str(user_exists))","        ","        if user_exists is None:","            logging.info('User Does not exist. Creating new user')","            hashpass = bcrypt.hashpw(request.form['password'].encode('utf-8'), bcrypt.gensalt())","            users.insert({'author':request.form['username'].lower(), 'password':hashpass})","            session['username'] = request.form['username'].lower()","            return redirect(url_for('get_recipes'))","","        flash('Username already exists, please choose a different one.')","        logging.info('User already exist. Skipping new user')","        session.pop('username', None)","        return render_template('register.html', title=\"Register\")","","    return render_template('register.html', title=\"Register\")","","#-----------Login-----------#","","@app.route('/login',methods=['GET','POST'])","def login():","    if request.method == 'POST':","        session[\"username\"] = request.form[\"username\"].lower()","        users = mongo.db.users","        user_login = users.find_one({'author':request.form['username'].lower()})","","        if user_login:","            if bcrypt.hashpw(request.form['password'].encode('utf-8'), user_login['password']) == user_login['password']:","                # session[\"username\"] = request.form[\"username\"].lower()","                return redirect(url_for('get_recipes'))","        ","        flash('The login details are not correct')","        session.pop('username', None)","        return render_template('login.html',  title=\"Login\")","","    return render_template('login.html',  title=\"Login\")","","#-----------Logout-----------#","@app.route('/logout')","def logout():","   # remove the username from the session if it is there","   session.pop('username', None)","   return redirect(url_for('index'))","","if __name__ == '__main__':","    app.run(host=os.environ.get('IP'),","            port=int(os.environ.get('PORT')),","            debug=True)"]}],[{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"remove","lines":["    "],"id":2729},{"start":{"row":23,"column":12},"end":{"row":24,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":218,"column":56},"end":{"row":219,"column":0},"action":"insert","lines":["",""],"id":2745},{"start":{"row":219,"column":0},"end":{"row":219,"column":4},"action":"insert","lines":["    "]},{"start":{"row":219,"column":4},"end":{"row":220,"column":0},"action":"insert","lines":["",""]},{"start":{"row":220,"column":0},"end":{"row":220,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":220,"column":4},"end":{"row":247,"column":28},"action":"insert","lines":["#-----------Account-----------#","","@app.route(\"/account/<account_name>, methods=['GET']\")","def account(account_name):","    logging.info(\"Account Name is: \" + str(account_name))","    users = mongo.db.users","    ","    logging.info(\"Recipes: \" + str(mongo.db.recipes.find({\"author\": account_name})))","    ","    recipes_submitted_by_user = mongo.db.recipes.find(","            {\"author\": account_name})","    logging.info(\"Recipes submitted by user: \" + str(recipes_submitted_by_user))","    ","    total_recipes_by_user = recipes_submitted_by_user.count() ","    logging.info(\"Total recipes by user: \" + str(total_recipes_by_user))","    if account_name != session.get('username'):","        logging.info(\"User is not allowed to access page\")","        flash(\"You can only access your own account page.\")","        return redirect(url_for('index'))","    else:","        logging.info(\"User is authorized to access page\")","        users = mongo.db.users.find_one({\"username\": account_name})","        recipe_submitted_by_user = mongo.db.recipes.find(","            {\"username\": account_name})","    return render_template('account.html',  ","                            users_recipes=recipe_submitted_by_user,","                            total_recipes_by_user = recipes_submitted_by_user.count() )","                            "],"id":2746}],[{"start":{"row":220,"column":0},"end":{"row":220,"column":4},"action":"remove","lines":["    "],"id":2747}],[{"start":{"row":247,"column":28},"end":{"row":248,"column":0},"action":"remove","lines":["",""],"id":2748}],[{"start":{"row":245,"column":48},"end":{"row":245,"column":49},"action":"insert","lines":["s"],"id":2749}]]},"ace":{"folds":[],"scrolltop":3360,"scrollleft":0,"selection":{"start":{"row":245,"column":49},"end":{"row":245,"column":49},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":209,"state":"start","mode":"ace/mode/python"}},"timestamp":1569102255511,"hash":"1f9dcb012b0660a7fa1b1a354d2ebac429ed8b7e"}